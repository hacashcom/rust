





#[repr(u8)]
#[derive(PartialEq, Debug, Clone, Copy)]
pub enum Bytecode {
    EXTACTION        =0x00,
    ________________1=0x01,
    ________________2=0x02,
    ________________3=0x03,
    ________________4=0x04,
    ________________5=0x05,
    EXTFUNC          =0x06,
    EXTENV           =0x07,
    ________________8=0x08,
    ________________9=0x09,
    ________________10=0x0a,
    ________________11=0x0b,
    ________________12=0x0c,
    ________________13=0x0d,
    ________________14=0x0e,
    ________________15=0x0f,
    ________________16=0x10,
    ________________17=0x11,
    ________________18=0x12,
    ________________19=0x13,
    ________________20=0x14,
    ________________21=0x15,
    ________________22=0x16,
    ________________23=0x17,
    ________________24=0x18,
    ________________25=0x19,
    ________________26=0x1a,
    ________________27=0x1b,
    ________________28=0x1c,
    ________________29=0x1d,
    ________________30=0x1e,
    ________________31=0x1f,
    CALL              =0x20,
    CALLLOC           =0x21,
    CALLLIB           =0x22,
    CALLSTATIC        =0x23,
    CALLCODE          =0x24, // call mode: code
    ________________37=0x25,
    NATIVECALL        =0x26,
    NATIVEENV         =0x27,
    ________________40=0x28,
    ________________41=0x29,
    ________________42=0x2a,
    ________________43=0x2b,
    ________________44=0x2c,
    ________________45=0x2d,
    ________________46=0x2e,
    ________________47=0x2f,
    ________________48=0x30,
    ________________49=0x31,
    ________________50=0x32,
    ________________51=0x33,
    ________________52=0x34,
    ________________53=0x35,
    ________________54=0x36,
    ________________55=0x37,
    ________________56=0x38,
    ________________57=0x39,
    ________________58=0x3a,
    ________________59=0x3b,
    ________________60=0x3c,
    ________________61=0x3d,
    ________________62=0x3e,
    ________________63=0x3f,
    CASTU8            =0x40,
    CASTU16           =0x41,
    CASTU32           =0x42,
    CASTU64           =0x43,
    CASTU128          =0x44,
    ________________69=0x45, /* CASTU256 = 0x45, */
    CASTBUF           =0x46,
    ________________71=0x47,
    PUSHU8            =0x48,
    PUSHU16           =0x49,
    PUSH0             =0x4a,
    PUSH1             =0x4b,
    PUSHNBUF          =0x4c, // empty buf
    PUSHBUFL          =0x4d,
    PUSHBUF           =0x4e,
    ________________79=0x4f,
    ________________80=0x50,
    ________________81=0x51,
    ________________82=0x52,
    ________________83=0x53,
    ________________84=0x54,
    ________________85=0x55,
    ________________86=0x56,
    ________________87=0x57,
    DUP               =0x58,
    POP               =0x59,
    ________________90=0x5a,
    ________________91=0x5b,
    ________________92=0x5c,
    ________________93=0x5d,
    SWAP              =0x5e, // swap a,b = b,a
    ________________95=0x5f,
    ________________96=0x60,
    ________________97=0x61,
    ________________98=0x62,
    ________________99=0x63,
    ________________100=0x64,
    ________________101=0x65,
    ________________102=0x66,
    ________________103=0x67,
    ________________104=0x68,
    ________________105=0x69,
    ________________106=0x6a,
    ________________107=0x6b,
    ________________108=0x6c,
    ________________109=0x6d,
    ________________110=0x6e,
    ________________111=0x6f,
    ________________112=0x70,
    ________________113=0x71,
    ________________114=0x72,
    ________________115=0x73,
    ________________116=0x74,
    ________________117=0x75,
    ________________118=0x76,
    ________________119=0x77,
    NOT                =0x78, // not
    EQ                 =0x79, // equal
    NEQ                =0x7a, // not equal
    LT                 =0x7b, // less than
    GT                 =0x7c, // great than
    LE                 =0x7d, // less and eq
    GE                 =0x7e, // great and eq
    ________________127=0x7f,
    ADD                =0x80, // +
    SUB                =0x81, // -
    MUL                =0x82, // *
    DIV                =0x83, // /
    MOD                =0x84,
    POW                =0x85,
    ________________134=0x86,
    ________________135=0x87,
    ________________136=0x88,
    ________________137=0x89,
    ________________138=0x8a,
    ________________139=0x8b,
    ________________140=0x8c,
    ________________141=0x8d,
    ________________142=0x8e,
    ________________143=0x8f,
    ________________144=0x90,
    ________________145=0x91,
    ________________146=0x92,
    ________________147=0x93,
    ________________148=0x94,
    ________________149=0x95,
    ________________150=0x96,
    ________________151=0x97,
    ________________152=0x98,
    ________________153=0x99,
    ________________154=0x9a,
    ________________155=0x9b,
    ________________156=0x9c,
    ________________157=0x9d,
    ________________158=0x9e,
    ________________159=0x9f,
    ________________160=0xa0,
    ________________161=0xa1,
    ________________162=0xa2,
    ________________163=0xa3,
    ________________164=0xa4,
    ________________165=0xa5,
    ________________166=0xa6,
    ________________167=0xa7,
    ________________168=0xa8,
    ________________169=0xa9,
    ________________170=0xaa,
    ________________171=0xab,
    ________________172=0xac,
    ________________173=0xad,
    ________________174=0xae,
    ________________175=0xaf,
    ________________176=0xb0,
    ________________177=0xb1,
    ________________178=0xb2,
    ________________179=0xb3,
    ________________180=0xb4,
    ________________181=0xb5,
    ________________182=0xb6,
    ________________183=0xb7,
    ________________184=0xb8,
    ________________185=0xb9,
    ________________186=0xba,
    ________________187=0xbb,
    ________________188=0xbc,
    GET                =0xbd, // local get
    PUT                =0xbe, // local put
    ALLOC              =0xbf, // local alloc
    ________________192=0xc0,
    ________________193=0xc1,
    ________________194=0xc2,
    ________________195=0xc3,
    ________________196=0xc4,
    ________________197=0xc5,
    ________________198=0xc6,
    ________________199=0xc7,
    ________________200=0xc8,
    ________________201=0xc9,
    ________________202=0xca,
    ________________203=0xcb,
    ________________204=0xcc,
    ________________205=0xcd,
    ________________206=0xce,
    ________________207=0xcf,
    ________________208=0xd0,
    ________________209=0xd1,
    ________________210=0xd2,
    ________________211=0xd3,
    ________________212=0xd4,
    ________________213=0xd5,
    ________________214=0xd6,
    ________________215=0xd7,
    ________________216=0xd8,
    ________________217=0xd9,
    ________________218=0xda,
    ________________219=0xdb,
    ________________220=0xdc,
    ________________221=0xdd,
    ________________222=0xde,
    ________________223=0xdf,
    IR_BLOCK           =0xe0,
    IR_IF              =0xe1,
    IR_WHILE           =0xe2,
    ________________227=0xe3,
    ________________228=0xe4,
    ________________229=0xe5,
    ________________230=0xe6,
    ________________231=0xe7,
    ________________232=0xe8,
    ________________233=0xe9,
    ________________234=0xea,
    BURN               =0xeb, // just burn gas
    NOP                =0xec, // do nothing
    RET                =0xed, // ret with data (function return)
    ABT                =0xee, // end with error (abort)
    END                =0xef, // end with finish
    JMPL               =0xf0, // jump long
    JMPS               =0xf1, // jump offset
    JMPSL              =0xf2, // jump offset long
    BRL                =0xf3, // branch long
    BRS                =0xf4, // branch offset
    BRSL               =0xf5, // branch offset long
    BRNSL              =0xf6, // branch not offset long
    ________________247=0xf7,
    ________________248=0xf8,
    ________________249=0xf9,
    ________________250=0xfa,
    ________________251=0xfb,
    ________________252=0xfc,
    ________________253=0xfd,
    ________________254=0xfe,
    NT                 =0xff, // panic: never touch
}










/*
macro_rules! define_bytecode_ptrs {
    ($( $name:ident : $bytv:expr)+) => {  
        $(
// concat_idents!(op_name = OP_, $name { pub const op_name: u8 = $bytv; });

pub const $name: u8 = $bytv;

        )+
    }
}

// define
// pub const OP_NOP: u8 = 0xfd;
define_bytecode_ptrs!{

    NT    : 0xff // panic: never touch

    END   : 0xef // end with finish
    ABT   : 0xee // end with error (abort)
    RET   : 0xed // ret with data (function return)
    NOP   : 0xec // do nothing

    ADD   : 0x80 // +

}
*/